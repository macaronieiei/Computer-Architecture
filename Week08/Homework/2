.data
sorted_arr : .word -126, -115, -99, -75, -45, -23, -12, 0, 15, 38, 57, 78, 89, 103, 126

.text
la x12, sorted_arr          # load starting address of sorted_arr to x12
addi x18, x0, 15            # arr_size = 15
addi x13, x0, 0              # left = 0
addi x14, x18, -1           # right = srr_size-1
addi x19, x0, 89            # key = 89
addi x17, x0, 0              # num_step = 0 

#binary search
addi x16, x0, -1            # result = -1

binary_search :
bgt x13, x14, exit_binary_search         # if left > right go to exit
addi x17, x17, 1             # num_step++
sub x15, x14, x13          # mid = right - left
srai x15, x15, 1             # mid = (right - left) >> 1
add x15, x15, x13         # mid = left + ((right - left) >> 1)

# x24 = sorted_arr[mid]
slli x23, x15, 2              # x23 = mid * 4
add x23, x23, x12         # x23 = address of sorted_arr[mid]
lw x24, 0(x23)              # load sorted_arr[mid] into x 24

# if (sorted_arr[mid] == key)
bne x24, x19 ,if            # if sorted_arr[mid] != key (x19) go to if
add x16, x15, x0          # result = mid
j exit_binary_search

# if (sorted_arr[mid] < key)
if:
bge x24, x15, else        # if sorted_arr[mid] >= key (x19) go to else
addi x13, x15, 1           # left = mid + 1
j binary_search

else :
addi x14, x15, -1          # right = mid - 1
j binary_search

exit_binary_search :
# sequential_search
addi x21, x0, 0             # num_step_2 = 0
addi x20, x0, -1            # result_2 = -1
addi x22, x0, 0              # i = 0

sequential_search :
bge x22, x18, exit_sequential_search            # if i >= arr_size go to exit_sequential_search
addi x21, x21, 1            # num_step_2++

#x26 = sorted_arr[i]
slli x25, x22, 2              # x23 = mid * 4
add x25, x25, x12         # x23 = address of sorted_arr[i]
lw x26, 0(x25)              # load sorted_arr[i] into x 24

# if (sorted_arr[i] == key)
bne x26, x19, i++         # if sorted_arr[i] != key got i++ and start sequential_search again
add x20, x22, x0           # result_2 = i
j exit_sequential_search 

i++ :
addi x22, x22, 1 # i++
j sequential_search # start sequential_search again

exit_sequential_search :
